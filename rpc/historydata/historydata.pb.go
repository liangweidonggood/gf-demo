// Code generated by protoc-gen-go. DO NOT EDIT.
// source: historydata.proto

package historydata

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UploadWorkHourReq struct {
	ComId                int64    `protobuf:"varint,1,opt,name=comId,proto3" json:"comId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadWorkHourReq) Reset()         { *m = UploadWorkHourReq{} }
func (m *UploadWorkHourReq) String() string { return proto.CompactTextString(m) }
func (*UploadWorkHourReq) ProtoMessage()    {}
func (*UploadWorkHourReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_67741f41111d8130, []int{0}
}

func (m *UploadWorkHourReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadWorkHourReq.Unmarshal(m, b)
}
func (m *UploadWorkHourReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadWorkHourReq.Marshal(b, m, deterministic)
}
func (m *UploadWorkHourReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadWorkHourReq.Merge(m, src)
}
func (m *UploadWorkHourReq) XXX_Size() int {
	return xxx_messageInfo_UploadWorkHourReq.Size(m)
}
func (m *UploadWorkHourReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadWorkHourReq.DiscardUnknown(m)
}

var xxx_messageInfo_UploadWorkHourReq proto.InternalMessageInfo

func (m *UploadWorkHourReq) GetComId() int64 {
	if m != nil {
		return m.ComId
	}
	return 0
}

type UploadWorkHourResp struct {
	Res                  string   `protobuf:"bytes,1,opt,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadWorkHourResp) Reset()         { *m = UploadWorkHourResp{} }
func (m *UploadWorkHourResp) String() string { return proto.CompactTextString(m) }
func (*UploadWorkHourResp) ProtoMessage()    {}
func (*UploadWorkHourResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_67741f41111d8130, []int{1}
}

func (m *UploadWorkHourResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadWorkHourResp.Unmarshal(m, b)
}
func (m *UploadWorkHourResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadWorkHourResp.Marshal(b, m, deterministic)
}
func (m *UploadWorkHourResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadWorkHourResp.Merge(m, src)
}
func (m *UploadWorkHourResp) XXX_Size() int {
	return xxx_messageInfo_UploadWorkHourResp.Size(m)
}
func (m *UploadWorkHourResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadWorkHourResp.DiscardUnknown(m)
}

var xxx_messageInfo_UploadWorkHourResp proto.InternalMessageInfo

func (m *UploadWorkHourResp) GetRes() string {
	if m != nil {
		return m.Res
	}
	return ""
}

type HistoryDataReq struct {
	Src                  string   `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	Time                 string   `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HistoryDataReq) Reset()         { *m = HistoryDataReq{} }
func (m *HistoryDataReq) String() string { return proto.CompactTextString(m) }
func (*HistoryDataReq) ProtoMessage()    {}
func (*HistoryDataReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_67741f41111d8130, []int{2}
}

func (m *HistoryDataReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistoryDataReq.Unmarshal(m, b)
}
func (m *HistoryDataReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistoryDataReq.Marshal(b, m, deterministic)
}
func (m *HistoryDataReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoryDataReq.Merge(m, src)
}
func (m *HistoryDataReq) XXX_Size() int {
	return xxx_messageInfo_HistoryDataReq.Size(m)
}
func (m *HistoryDataReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoryDataReq.DiscardUnknown(m)
}

var xxx_messageInfo_HistoryDataReq proto.InternalMessageInfo

func (m *HistoryDataReq) GetSrc() string {
	if m != nil {
		return m.Src
	}
	return ""
}

func (m *HistoryDataReq) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

type StrRes struct {
	Res                  string   `protobuf:"bytes,1,opt,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StrRes) Reset()         { *m = StrRes{} }
func (m *StrRes) String() string { return proto.CompactTextString(m) }
func (*StrRes) ProtoMessage()    {}
func (*StrRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_67741f41111d8130, []int{3}
}

func (m *StrRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StrRes.Unmarshal(m, b)
}
func (m *StrRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StrRes.Marshal(b, m, deterministic)
}
func (m *StrRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrRes.Merge(m, src)
}
func (m *StrRes) XXX_Size() int {
	return xxx_messageInfo_StrRes.Size(m)
}
func (m *StrRes) XXX_DiscardUnknown() {
	xxx_messageInfo_StrRes.DiscardUnknown(m)
}

var xxx_messageInfo_StrRes proto.InternalMessageInfo

func (m *StrRes) GetRes() string {
	if m != nil {
		return m.Res
	}
	return ""
}

type SnReq struct {
	Sn                   string   `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnReq) Reset()         { *m = SnReq{} }
func (m *SnReq) String() string { return proto.CompactTextString(m) }
func (*SnReq) ProtoMessage()    {}
func (*SnReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_67741f41111d8130, []int{4}
}

func (m *SnReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SnReq.Unmarshal(m, b)
}
func (m *SnReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SnReq.Marshal(b, m, deterministic)
}
func (m *SnReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnReq.Merge(m, src)
}
func (m *SnReq) XXX_Size() int {
	return xxx_messageInfo_SnReq.Size(m)
}
func (m *SnReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SnReq.DiscardUnknown(m)
}

var xxx_messageInfo_SnReq proto.InternalMessageInfo

func (m *SnReq) GetSn() string {
	if m != nil {
		return m.Sn
	}
	return ""
}

type RedisFindHistoryRes struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MacType              int64    `protobuf:"varint,2,opt,name=macType,proto3" json:"macType,omitempty"`
	Src                  string   `protobuf:"bytes,3,opt,name=src,proto3" json:"src,omitempty"`
	Data                 string   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Time                 string   `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	MacStatus            int64    `protobuf:"varint,6,opt,name=macStatus,proto3" json:"macStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedisFindHistoryRes) Reset()         { *m = RedisFindHistoryRes{} }
func (m *RedisFindHistoryRes) String() string { return proto.CompactTextString(m) }
func (*RedisFindHistoryRes) ProtoMessage()    {}
func (*RedisFindHistoryRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_67741f41111d8130, []int{5}
}

func (m *RedisFindHistoryRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisFindHistoryRes.Unmarshal(m, b)
}
func (m *RedisFindHistoryRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisFindHistoryRes.Marshal(b, m, deterministic)
}
func (m *RedisFindHistoryRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisFindHistoryRes.Merge(m, src)
}
func (m *RedisFindHistoryRes) XXX_Size() int {
	return xxx_messageInfo_RedisFindHistoryRes.Size(m)
}
func (m *RedisFindHistoryRes) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisFindHistoryRes.DiscardUnknown(m)
}

var xxx_messageInfo_RedisFindHistoryRes proto.InternalMessageInfo

func (m *RedisFindHistoryRes) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RedisFindHistoryRes) GetMacType() int64 {
	if m != nil {
		return m.MacType
	}
	return 0
}

func (m *RedisFindHistoryRes) GetSrc() string {
	if m != nil {
		return m.Src
	}
	return ""
}

func (m *RedisFindHistoryRes) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *RedisFindHistoryRes) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *RedisFindHistoryRes) GetMacStatus() int64 {
	if m != nil {
		return m.MacStatus
	}
	return 0
}

type FindAlarmListByDayReq struct {
	Sn                   string   `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	Day                  int64    `protobuf:"varint,2,opt,name=day,proto3" json:"day,omitempty"`
	Data                 string   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindAlarmListByDayReq) Reset()         { *m = FindAlarmListByDayReq{} }
func (m *FindAlarmListByDayReq) String() string { return proto.CompactTextString(m) }
func (*FindAlarmListByDayReq) ProtoMessage()    {}
func (*FindAlarmListByDayReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_67741f41111d8130, []int{6}
}

func (m *FindAlarmListByDayReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAlarmListByDayReq.Unmarshal(m, b)
}
func (m *FindAlarmListByDayReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAlarmListByDayReq.Marshal(b, m, deterministic)
}
func (m *FindAlarmListByDayReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAlarmListByDayReq.Merge(m, src)
}
func (m *FindAlarmListByDayReq) XXX_Size() int {
	return xxx_messageInfo_FindAlarmListByDayReq.Size(m)
}
func (m *FindAlarmListByDayReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAlarmListByDayReq.DiscardUnknown(m)
}

var xxx_messageInfo_FindAlarmListByDayReq proto.InternalMessageInfo

func (m *FindAlarmListByDayReq) GetSn() string {
	if m != nil {
		return m.Sn
	}
	return ""
}

func (m *FindAlarmListByDayReq) GetDay() int64 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *FindAlarmListByDayReq) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type FindAlarmListByDayRes struct {
	StartTime            string   `protobuf:"bytes,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime              string   `protobuf:"bytes,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Alarm                int64    `protobuf:"varint,3,opt,name=alarm,proto3" json:"alarm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindAlarmListByDayRes) Reset()         { *m = FindAlarmListByDayRes{} }
func (m *FindAlarmListByDayRes) String() string { return proto.CompactTextString(m) }
func (*FindAlarmListByDayRes) ProtoMessage()    {}
func (*FindAlarmListByDayRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_67741f41111d8130, []int{7}
}

func (m *FindAlarmListByDayRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAlarmListByDayRes.Unmarshal(m, b)
}
func (m *FindAlarmListByDayRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAlarmListByDayRes.Marshal(b, m, deterministic)
}
func (m *FindAlarmListByDayRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAlarmListByDayRes.Merge(m, src)
}
func (m *FindAlarmListByDayRes) XXX_Size() int {
	return xxx_messageInfo_FindAlarmListByDayRes.Size(m)
}
func (m *FindAlarmListByDayRes) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAlarmListByDayRes.DiscardUnknown(m)
}

var xxx_messageInfo_FindAlarmListByDayRes proto.InternalMessageInfo

func (m *FindAlarmListByDayRes) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *FindAlarmListByDayRes) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *FindAlarmListByDayRes) GetAlarm() int64 {
	if m != nil {
		return m.Alarm
	}
	return 0
}

type FindAlarmListByDayListRes struct {
	Data                 []*FindAlarmListByDayRes `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *FindAlarmListByDayListRes) Reset()         { *m = FindAlarmListByDayListRes{} }
func (m *FindAlarmListByDayListRes) String() string { return proto.CompactTextString(m) }
func (*FindAlarmListByDayListRes) ProtoMessage()    {}
func (*FindAlarmListByDayListRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_67741f41111d8130, []int{8}
}

func (m *FindAlarmListByDayListRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAlarmListByDayListRes.Unmarshal(m, b)
}
func (m *FindAlarmListByDayListRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAlarmListByDayListRes.Marshal(b, m, deterministic)
}
func (m *FindAlarmListByDayListRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAlarmListByDayListRes.Merge(m, src)
}
func (m *FindAlarmListByDayListRes) XXX_Size() int {
	return xxx_messageInfo_FindAlarmListByDayListRes.Size(m)
}
func (m *FindAlarmListByDayListRes) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAlarmListByDayListRes.DiscardUnknown(m)
}

var xxx_messageInfo_FindAlarmListByDayListRes proto.InternalMessageInfo

func (m *FindAlarmListByDayListRes) GetData() []*FindAlarmListByDayRes {
	if m != nil {
		return m.Data
	}
	return nil
}

type FindAlarmCountByDayReq struct {
	Sn                   string   `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	Day                  int64    `protobuf:"varint,2,opt,name=day,proto3" json:"day,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindAlarmCountByDayReq) Reset()         { *m = FindAlarmCountByDayReq{} }
func (m *FindAlarmCountByDayReq) String() string { return proto.CompactTextString(m) }
func (*FindAlarmCountByDayReq) ProtoMessage()    {}
func (*FindAlarmCountByDayReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_67741f41111d8130, []int{9}
}

func (m *FindAlarmCountByDayReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAlarmCountByDayReq.Unmarshal(m, b)
}
func (m *FindAlarmCountByDayReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAlarmCountByDayReq.Marshal(b, m, deterministic)
}
func (m *FindAlarmCountByDayReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAlarmCountByDayReq.Merge(m, src)
}
func (m *FindAlarmCountByDayReq) XXX_Size() int {
	return xxx_messageInfo_FindAlarmCountByDayReq.Size(m)
}
func (m *FindAlarmCountByDayReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAlarmCountByDayReq.DiscardUnknown(m)
}

var xxx_messageInfo_FindAlarmCountByDayReq proto.InternalMessageInfo

func (m *FindAlarmCountByDayReq) GetSn() string {
	if m != nil {
		return m.Sn
	}
	return ""
}

func (m *FindAlarmCountByDayReq) GetDay() int64 {
	if m != nil {
		return m.Day
	}
	return 0
}

type FindAlarmCountByDayRes struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Value                int64    `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindAlarmCountByDayRes) Reset()         { *m = FindAlarmCountByDayRes{} }
func (m *FindAlarmCountByDayRes) String() string { return proto.CompactTextString(m) }
func (*FindAlarmCountByDayRes) ProtoMessage()    {}
func (*FindAlarmCountByDayRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_67741f41111d8130, []int{10}
}

func (m *FindAlarmCountByDayRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAlarmCountByDayRes.Unmarshal(m, b)
}
func (m *FindAlarmCountByDayRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAlarmCountByDayRes.Marshal(b, m, deterministic)
}
func (m *FindAlarmCountByDayRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAlarmCountByDayRes.Merge(m, src)
}
func (m *FindAlarmCountByDayRes) XXX_Size() int {
	return xxx_messageInfo_FindAlarmCountByDayRes.Size(m)
}
func (m *FindAlarmCountByDayRes) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAlarmCountByDayRes.DiscardUnknown(m)
}

var xxx_messageInfo_FindAlarmCountByDayRes proto.InternalMessageInfo

func (m *FindAlarmCountByDayRes) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *FindAlarmCountByDayRes) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type FindAlarmCountByDayListRes struct {
	Data                 []*FindAlarmCountByDayRes `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *FindAlarmCountByDayListRes) Reset()         { *m = FindAlarmCountByDayListRes{} }
func (m *FindAlarmCountByDayListRes) String() string { return proto.CompactTextString(m) }
func (*FindAlarmCountByDayListRes) ProtoMessage()    {}
func (*FindAlarmCountByDayListRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_67741f41111d8130, []int{11}
}

func (m *FindAlarmCountByDayListRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAlarmCountByDayListRes.Unmarshal(m, b)
}
func (m *FindAlarmCountByDayListRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAlarmCountByDayListRes.Marshal(b, m, deterministic)
}
func (m *FindAlarmCountByDayListRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAlarmCountByDayListRes.Merge(m, src)
}
func (m *FindAlarmCountByDayListRes) XXX_Size() int {
	return xxx_messageInfo_FindAlarmCountByDayListRes.Size(m)
}
func (m *FindAlarmCountByDayListRes) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAlarmCountByDayListRes.DiscardUnknown(m)
}

var xxx_messageInfo_FindAlarmCountByDayListRes proto.InternalMessageInfo

func (m *FindAlarmCountByDayListRes) GetData() []*FindAlarmCountByDayRes {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*UploadWorkHourReq)(nil), "historydata.uploadWorkHourReq")
	proto.RegisterType((*UploadWorkHourResp)(nil), "historydata.uploadWorkHourResp")
	proto.RegisterType((*HistoryDataReq)(nil), "historydata.historyDataReq")
	proto.RegisterType((*StrRes)(nil), "historydata.strRes")
	proto.RegisterType((*SnReq)(nil), "historydata.snReq")
	proto.RegisterType((*RedisFindHistoryRes)(nil), "historydata.redisFindHistoryRes")
	proto.RegisterType((*FindAlarmListByDayReq)(nil), "historydata.findAlarmListByDayReq")
	proto.RegisterType((*FindAlarmListByDayRes)(nil), "historydata.findAlarmListByDayRes")
	proto.RegisterType((*FindAlarmListByDayListRes)(nil), "historydata.findAlarmListByDayListRes")
	proto.RegisterType((*FindAlarmCountByDayReq)(nil), "historydata.findAlarmCountByDayReq")
	proto.RegisterType((*FindAlarmCountByDayRes)(nil), "historydata.findAlarmCountByDayRes")
	proto.RegisterType((*FindAlarmCountByDayListRes)(nil), "historydata.findAlarmCountByDayListRes")
}

func init() { proto.RegisterFile("historydata.proto", fileDescriptor_67741f41111d8130) }

var fileDescriptor_67741f41111d8130 = []byte{
	// 503 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcd, 0x6e, 0xd4, 0x30,
	0x10, 0xc7, 0x95, 0xa4, 0xbb, 0xa8, 0x53, 0x29, 0x6c, 0xbd, 0x05, 0x42, 0x40, 0xb0, 0x32, 0x12,
	0x94, 0x4b, 0x0f, 0x45, 0x2a, 0x52, 0x6f, 0x2c, 0x15, 0x5a, 0x24, 0x38, 0x90, 0x2e, 0xe2, 0xc2,
	0xc5, 0x8d, 0x83, 0x88, 0xd8, 0x7c, 0xac, 0xed, 0x20, 0xe5, 0x49, 0x78, 0x4a, 0xde, 0x01, 0x4d,
	0x1c, 0x6f, 0xd6, 0x5d, 0x43, 0xcb, 0x6d, 0x66, 0x62, 0xff, 0xe7, 0x37, 0xe3, 0x99, 0xc0, 0xe1,
	0xf7, 0x5c, 0xaa, 0x4a, 0xb4, 0x9c, 0x29, 0x76, 0x52, 0x8b, 0x4a, 0x55, 0xe4, 0x60, 0x2b, 0x44,
	0x5f, 0xc2, 0x61, 0x53, 0xaf, 0x2a, 0xc6, 0xbf, 0x54, 0xe2, 0xc7, 0xa2, 0x6a, 0x44, 0x92, 0xad,
	0xc9, 0x11, 0x8c, 0xd2, 0xaa, 0x78, 0xcf, 0x23, 0x6f, 0xe6, 0x1d, 0x07, 0x89, 0x76, 0xe8, 0x73,
	0x20, 0xd7, 0x8f, 0xca, 0x9a, 0x4c, 0x20, 0x10, 0x99, 0xec, 0x4e, 0xee, 0x27, 0x68, 0xd2, 0x33,
	0x08, 0xfb, 0x0c, 0x17, 0x4c, 0x31, 0xd4, 0x9b, 0x40, 0x20, 0x45, 0x6a, 0xce, 0x48, 0x91, 0x12,
	0x02, 0x7b, 0x2a, 0x2f, 0xb2, 0xc8, 0xef, 0x42, 0x9d, 0x4d, 0x63, 0x18, 0x4b, 0x85, 0xa2, 0x0e,
	0xcd, 0x07, 0x30, 0x92, 0x25, 0x4a, 0x85, 0xe0, 0xcb, 0xb2, 0xff, 0xe2, 0xcb, 0x92, 0xfe, 0xf2,
	0x60, 0x2a, 0x32, 0x9e, 0xcb, 0x77, 0x79, 0xc9, 0x17, 0x3a, 0x2d, 0x4a, 0x84, 0xe0, 0xe7, 0x86,
	0xdf, 0xcf, 0x39, 0x89, 0xe0, 0x4e, 0xc1, 0xd2, 0x65, 0x5b, 0xeb, 0x9c, 0x41, 0x62, 0x5c, 0x03,
	0x17, 0x58, 0x70, 0xd8, 0x9b, 0x68, 0x4f, 0xc3, 0xa1, 0xbd, 0x01, 0x1e, 0x0d, 0xc0, 0xe4, 0x31,
	0xec, 0x17, 0x2c, 0xbd, 0x54, 0x4c, 0x35, 0x32, 0x1a, 0x77, 0xaa, 0x43, 0x80, 0x7e, 0x84, 0x7b,
	0xdf, 0xf2, 0x92, 0xbf, 0x59, 0x31, 0x51, 0x7c, 0xc8, 0xa5, 0x9a, 0xb7, 0x17, 0xac, 0x75, 0x94,
	0x80, 0x00, 0x9c, 0xb5, 0x3d, 0x16, 0x9a, 0x1b, 0x80, 0x60, 0x00, 0xa0, 0x99, 0x5b, 0x4e, 0x22,
	0x85, 0x54, 0x4c, 0xa8, 0x25, 0xe2, 0x69, 0xd5, 0x21, 0x80, 0x75, 0x67, 0x25, 0x5f, 0x0e, 0xbd,
	0x36, 0x2e, 0x3e, 0x32, 0x43, 0xb1, 0x2e, 0x4b, 0x90, 0x68, 0x87, 0x5e, 0xc2, 0xc3, 0xdd, 0x34,
	0x68, 0x60, 0xaa, 0xb3, 0x9e, 0xcb, 0x9b, 0x05, 0xc7, 0x07, 0xa7, 0xf4, 0x64, 0x7b, 0xb6, 0x9c,
	0x70, 0x3d, 0xfb, 0x39, 0xdc, 0xdf, 0x7c, 0x7e, 0x5b, 0x35, 0xe5, 0x7f, 0xf4, 0x82, 0xce, 0xff,
	0x72, 0x57, 0x6e, 0xba, 0xe4, 0x6d, 0x3d, 0xd3, 0x11, 0x8c, 0x7e, 0xb2, 0x55, 0x63, 0x1e, 0x59,
	0x3b, 0xf4, 0x33, 0xc4, 0x0e, 0x0d, 0x53, 0xd5, 0x6b, 0xab, 0xaa, 0x67, 0xee, 0xaa, 0xac, 0xd4,
	0x3a, 0xd9, 0xe9, 0xef, 0x00, 0xb6, 0x77, 0x89, 0x7c, 0x82, 0xd0, 0x5e, 0x10, 0xf2, 0xc4, 0x12,
	0xdb, 0x59, 0xb4, 0xf8, 0xe9, 0x3f, 0xbf, 0xcb, 0x9a, 0x9c, 0xc3, 0x5d, 0xc6, 0xcd, 0x5c, 0x2f,
	0xd9, 0xd5, 0x2a, 0x23, 0xc4, 0xba, 0xd3, 0x6d, 0x45, 0x3c, 0xb5, 0x63, 0x7a, 0x8b, 0x16, 0x30,
	0xb9, 0xbe, 0x19, 0xce, 0xcb, 0x33, 0x2b, 0xe6, 0x5a, 0xa6, 0x39, 0x84, 0x03, 0x05, 0x2e, 0x35,
	0x79, 0x64, 0xdd, 0xb1, 0xd7, 0xdd, 0x4d, 0x93, 0xc2, 0xd4, 0xd1, 0x4c, 0x72, 0x8b, 0x76, 0xaf,
	0xe3, 0x17, 0x37, 0x1d, 0x32, 0x4f, 0xf9, 0x15, 0xc8, 0xee, 0x1c, 0x92, 0x9b, 0x07, 0x75, 0x1d,
	0xdf, 0x62, 0x98, 0xaf, 0xc6, 0xdd, 0xff, 0xf3, 0xd5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x85,
	0x9c, 0xbc, 0x04, 0x54, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HistorydataClient is the client API for Historydata service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HistorydataClient interface {
	//根据企业id统计工时并上传 返回远程调用的信息
	UploadWorkHour(ctx context.Context, in *UploadWorkHourReq, opts ...grpc.CallOption) (*UploadWorkHourResp, error)
	//新增history表   新增alarm表
	AddHistoryTable(ctx context.Context, in *SnReq, opts ...grpc.CallOption) (*StrRes, error)
	//redis中查询history
	RedisFindHistory(ctx context.Context, in *SnReq, opts ...grpc.CallOption) (*RedisFindHistoryRes, error)
	//新增history,alarm记录 redis中新增history最新记录
	AddHistoryData(ctx context.Context, in *HistoryDataReq, opts ...grpc.CallOption) (*StrRes, error)
	//统计alarm数据 按天统计近N天的报警 数量和日期
	FindAlarmCountByDay(ctx context.Context, in *FindAlarmCountByDayReq, opts ...grpc.CallOption) (*FindAlarmCountByDayListRes, error)
	//根据条件统计报警 起始时间 报警数据
	FindAlarmListByDay(ctx context.Context, in *FindAlarmListByDayReq, opts ...grpc.CallOption) (*FindAlarmListByDayRes, error)
}

type historydataClient struct {
	cc *grpc.ClientConn
}

func NewHistorydataClient(cc *grpc.ClientConn) HistorydataClient {
	return &historydataClient{cc}
}

func (c *historydataClient) UploadWorkHour(ctx context.Context, in *UploadWorkHourReq, opts ...grpc.CallOption) (*UploadWorkHourResp, error) {
	out := new(UploadWorkHourResp)
	err := c.cc.Invoke(ctx, "/historydata.historydata/uploadWorkHour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historydataClient) AddHistoryTable(ctx context.Context, in *SnReq, opts ...grpc.CallOption) (*StrRes, error) {
	out := new(StrRes)
	err := c.cc.Invoke(ctx, "/historydata.historydata/addHistoryTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historydataClient) RedisFindHistory(ctx context.Context, in *SnReq, opts ...grpc.CallOption) (*RedisFindHistoryRes, error) {
	out := new(RedisFindHistoryRes)
	err := c.cc.Invoke(ctx, "/historydata.historydata/redisFindHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historydataClient) AddHistoryData(ctx context.Context, in *HistoryDataReq, opts ...grpc.CallOption) (*StrRes, error) {
	out := new(StrRes)
	err := c.cc.Invoke(ctx, "/historydata.historydata/addHistoryData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historydataClient) FindAlarmCountByDay(ctx context.Context, in *FindAlarmCountByDayReq, opts ...grpc.CallOption) (*FindAlarmCountByDayListRes, error) {
	out := new(FindAlarmCountByDayListRes)
	err := c.cc.Invoke(ctx, "/historydata.historydata/findAlarmCountByDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historydataClient) FindAlarmListByDay(ctx context.Context, in *FindAlarmListByDayReq, opts ...grpc.CallOption) (*FindAlarmListByDayRes, error) {
	out := new(FindAlarmListByDayRes)
	err := c.cc.Invoke(ctx, "/historydata.historydata/findAlarmListByDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HistorydataServer is the server API for Historydata service.
type HistorydataServer interface {
	//根据企业id统计工时并上传 返回远程调用的信息
	UploadWorkHour(context.Context, *UploadWorkHourReq) (*UploadWorkHourResp, error)
	//新增history表   新增alarm表
	AddHistoryTable(context.Context, *SnReq) (*StrRes, error)
	//redis中查询history
	RedisFindHistory(context.Context, *SnReq) (*RedisFindHistoryRes, error)
	//新增history,alarm记录 redis中新增history最新记录
	AddHistoryData(context.Context, *HistoryDataReq) (*StrRes, error)
	//统计alarm数据 按天统计近N天的报警 数量和日期
	FindAlarmCountByDay(context.Context, *FindAlarmCountByDayReq) (*FindAlarmCountByDayListRes, error)
	//根据条件统计报警 起始时间 报警数据
	FindAlarmListByDay(context.Context, *FindAlarmListByDayReq) (*FindAlarmListByDayRes, error)
}

// UnimplementedHistorydataServer can be embedded to have forward compatible implementations.
type UnimplementedHistorydataServer struct {
}

func (*UnimplementedHistorydataServer) UploadWorkHour(ctx context.Context, req *UploadWorkHourReq) (*UploadWorkHourResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadWorkHour not implemented")
}
func (*UnimplementedHistorydataServer) AddHistoryTable(ctx context.Context, req *SnReq) (*StrRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHistoryTable not implemented")
}
func (*UnimplementedHistorydataServer) RedisFindHistory(ctx context.Context, req *SnReq) (*RedisFindHistoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedisFindHistory not implemented")
}
func (*UnimplementedHistorydataServer) AddHistoryData(ctx context.Context, req *HistoryDataReq) (*StrRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHistoryData not implemented")
}
func (*UnimplementedHistorydataServer) FindAlarmCountByDay(ctx context.Context, req *FindAlarmCountByDayReq) (*FindAlarmCountByDayListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAlarmCountByDay not implemented")
}
func (*UnimplementedHistorydataServer) FindAlarmListByDay(ctx context.Context, req *FindAlarmListByDayReq) (*FindAlarmListByDayRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAlarmListByDay not implemented")
}

func RegisterHistorydataServer(s *grpc.Server, srv HistorydataServer) {
	s.RegisterService(&_Historydata_serviceDesc, srv)
}

func _Historydata_UploadWorkHour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadWorkHourReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistorydataServer).UploadWorkHour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/historydata.historydata/UploadWorkHour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistorydataServer).UploadWorkHour(ctx, req.(*UploadWorkHourReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Historydata_AddHistoryTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistorydataServer).AddHistoryTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/historydata.historydata/AddHistoryTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistorydataServer).AddHistoryTable(ctx, req.(*SnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Historydata_RedisFindHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistorydataServer).RedisFindHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/historydata.historydata/RedisFindHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistorydataServer).RedisFindHistory(ctx, req.(*SnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Historydata_AddHistoryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistorydataServer).AddHistoryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/historydata.historydata/AddHistoryData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistorydataServer).AddHistoryData(ctx, req.(*HistoryDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Historydata_FindAlarmCountByDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAlarmCountByDayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistorydataServer).FindAlarmCountByDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/historydata.historydata/FindAlarmCountByDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistorydataServer).FindAlarmCountByDay(ctx, req.(*FindAlarmCountByDayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Historydata_FindAlarmListByDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAlarmListByDayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistorydataServer).FindAlarmListByDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/historydata.historydata/FindAlarmListByDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistorydataServer).FindAlarmListByDay(ctx, req.(*FindAlarmListByDayReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Historydata_serviceDesc = grpc.ServiceDesc{
	ServiceName: "historydata.historydata",
	HandlerType: (*HistorydataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "uploadWorkHour",
			Handler:    _Historydata_UploadWorkHour_Handler,
		},
		{
			MethodName: "addHistoryTable",
			Handler:    _Historydata_AddHistoryTable_Handler,
		},
		{
			MethodName: "redisFindHistory",
			Handler:    _Historydata_RedisFindHistory_Handler,
		},
		{
			MethodName: "addHistoryData",
			Handler:    _Historydata_AddHistoryData_Handler,
		},
		{
			MethodName: "findAlarmCountByDay",
			Handler:    _Historydata_FindAlarmCountByDay_Handler,
		},
		{
			MethodName: "findAlarmListByDay",
			Handler:    _Historydata_FindAlarmListByDay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "historydata.proto",
}
